# Adapted from:
# - https://github.com/CentOS/sig-cloud-instance-build/blob/master/vagrant/centos8.ks
# - https://pagure.io/fedora-kickstarts/raw/f34/f/fedora-cloud-base.ks
# - https://pagure.io/fedora-kickstarts/raw/f34/f/fedora-cloud-base-vagrant.ks

# Perform unattended installation from cdrom (ISO image)
cdrom
cmdline
skipx
firstboot --disabled

# Setup bootloader, ensure we get "eth0" as interface
bootloader --timeout=0 --location=mbr --append="no_timer_check console=tty0 console=ttyS0,115200n8 net.ifnames=0 biosdevname=0 elevator=noop"

# Define language and timezone settings
lang en_US.UTF-8
keyboard us
timezone --utc UTC

# Remove all partitions
zerombr

# Setup partitions
clearpart --drives=sda --all
part / --fstype=xfs --asprimary --size=512 --grow --ondisk=sda

# Set SELinux state of installed system
selinux --enforcing

# Set firewall configuration
firewall --disabled

# Define network settings
network --device=eth0 --bootproto=dhcp

# Set root password (=vagrant)
rootpw vagrant

# Add vagrant user in group wheel for sudo
user --name=vagrant --uid=1000 --gid=1000 --password=vagrant --groups=wheel

services --enabled=sshd
services --disabled=cloud-init,cloud-init-local,cloud-config,cloud-final

# Reboot after installation
reboot

%packages --excludedocs --ignoremissing --instLangs=en
@core
bash-completion
bzip2
dnf-yum
rsync
chrony
-dracut-config-rescue
-efibootmgr
-firewalld
fuse-sshfs
-geolite2-country
-geolite2-city
#hyperv-daemons
-iprutils
-kexec-tools
-kernel
kernel-core
-microcode_ctl
#open-vm-tools
-plymouth*
-postfix
#qemu-guest-agent
%end

%post --erroronfail
# Configure locale (prevent 'can't set the locale' errors from ssh connection)
cat >> /etc/environment << EOF
LC_ALL=en_US.utf-8
EOF

# linux-firmware is installed by default and is quite large. As of mid 2020:
#   Total download size: 97 M
#   Installed size: 268 M
# So far we've been fine shipping without it so let's continue.
# More discussion about this in #1234504.
echo "Removing linux-firmware package."
rpm -e linux-firmware

# See the systemd-random-seed.service man page that says:
#   " It is recommended to remove the random seed from OS images intended
#     for replication on multiple systems"
echo "Removing random-seed so it's not the same in every image."
rm -f /var/lib/systemd/random-seed

echo "Import RPM GPG key"
releasever=$(rpm --eval '%{fedora}')
basearch=$(uname -i)
rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$releasever-$basearch

echo "Zeroing out empty space."
# This forces the filesystem to reclaim space from deleted files
dd bs=1M if=/dev/zero of=/var/tmp/zeros || :
rm -f /var/tmp/zeros
echo "(Don't worry -- that out-of-space error was expected.)"

# When we build the image a networking config file gets left behind.
# Let's clean it up.
echo "Cleanup leftover networking configuration"
rm -f /etc/NetworkManager/system-connections/*.nmconnection

# Setup sudoers (no password for wheel group; we've added vagrant to wheel)
cat > /etc/sudoers.d/vagrant << EOF
Defaults:%wheel env_keep += "SSH_AUTH_SOCK"
Defaults:%wheel !requiretty
%wheel ALL=(ALL) NOPASSWD: ALL
EOF
chmod 0440 /etc/sudoers.d/vagrant

# sshd: disable DNS checks
ex -s /etc/ssh/sshd_config <<EOF
:%substitute/^#\(UseDNS\) yes$/&\r\1 no/
:update
:quit
EOF
cat >>/etc/sysconfig/sshd <<EOF

# Decrease connection time by preventing reverse DNS lookups
# (see https://lists.centos.org/pipermail/centos-devel/2016-July/014981.html
#  and man sshd for more information)
OPTIONS="-u0"
EOF

# Default insecure vagrant key
mkdir -m 0700 -p /home/vagrant/.ssh
echo "ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key" >> /home/vagrant/.ssh/authorized_keys
chmod 600 /home/vagrant/.ssh/authorized_keys
chown -R vagrant:vagrant /home/vagrant/.ssh

# # Fix for issue #76, regular users can gain admin privileges via su
# ex -s /etc/pam.d/su <<'EOF'
# # allow vagrant to use su, but prevent others from becoming root or vagrant
# /^account\s\+sufficient\s\+pam_succeed_if.so uid = 0 use_uid quiet$/
# :append
# account		[success=1 default=ignore] \\
# 				pam_succeed_if.so user = vagrant use_uid quiet
# account		required	pam_succeed_if.so user notin root:vagrant
# .
# :update
# :quit
# EOF

# systemd should generate a new machine id during the first boot, to
# avoid having multiple Vagrant instances with the same id in the local
# network. /etc/machine-id should be empty, but it must exist to prevent
# boot errors (e.g. systemd-journald failing to start).
:> /etc/machine-id

# Blacklist the floppy module to avoid probing timeouts
echo blacklist floppy > /etc/modprobe.d/nofloppy.conf
chcon -u system_u -r object_r -t modules_conf_t /etc/modprobe.d/nofloppy.conf

# Customize the initramfs
pushd /etc/dracut.conf.d
# Enable VMware PVSCSI support for VMware Fusion guests.
# echo 'add_drivers+=" vmw_pvscsi "' > vmware-fusion-drivers.conf
# echo 'add_drivers+=" hv_netvsc hv_storvsc hv_utils hv_vmbus hid-hyperv "' > hyperv-drivers.conf
# There's no floppy controller, but probing for it generates timeouts
echo 'omit_drivers+=" floppy "' > nofloppy.conf
popd
# Fix the SELinux context of the new files
restorecon -f - <<EOF
/etc/sudoers.d/vagrant
# /etc/dracut.conf.d/vmware-fusion-drivers.conf
# /etc/dracut.conf.d/hyperv-drivers.conf
/etc/dracut.conf.d/nofloppy.conf
EOF

# # Rerun dracut for the installed kernel (not the running kernel):
# KERNEL_VERSION=$(rpm -q kernel --qf '%{version}-%{release}.%{arch}\n')
# dracut -f /boot/initramfs-${KERNEL_VERSION}.img ${KERNEL_VERSION}

cat > /etc/ssh/sshd_config.d/10-vagrant-insecure-rsa-key.conf <<EOF
# For now the vagrant insecure key is an rsa key
# https://github.com/hashicorp/vagrant/issues/11783
PubkeyAcceptedKeyTypes=+ssh-rsa
EOF

# Seal for deployment
rm -rf /etc/ssh/ssh_host_*
hostnamectl set-hostname localhost.localdomain
rm -rf /etc/udev/rules.d/70-*

mkdir -p /usr/share/vagrantry
cat > /usr/share/vagrantry/seal.sh << EOF
#!/usr/bin/env bash
export PATH=/sbin:/usr/sbin:/usr/local/sbin:/root/bin:/usr/local/bin:/usr/bin:/bin
set -eux -o pipefail

# delete some stuff
rm -frv \
  /etc/udev/rules.d/70-persistent-net.rules \
  /var/cache/yum/* \
  /var/lib/systemd/random-seed \
  /var/log/journal/*
find /tmp /var/tmp -type f -mindepth 1 -maxdepth 1 -delete
find /tmp /var/tmp -type d -mindepth 1 -maxdepth 1 -exec rm -rvf {} \;

# truncate logs
find /var/log -type f -exec truncate --size=0 {} \;

# reset the machine id
truncate --size=0 /etc/machine-id
EOF
chmod +x /usr/share/vagrantry/seal.sh
%end
